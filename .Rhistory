reg_ex <- regsubsets(crim ~ ., data = Boston, nvmax = 13)
reg_ex
regsubsets(crim ~ ., data = Boston, nvmax = 13)
reg_ex_summary <- summary(reg_ex)
reg_ex_summary
reg_ex_summary$adjr2
reg_ex_summary$rsq
reg_ex_summary$rss
reg_ex_summary$outmat
reg_ex_summary$outmat[1]
reg_ex_summary$outmat[1,1]
reg_ex_summary$outmat[,1]
reg_ex_summary$outmat[1,]
res <- reg_ex_summary$outmat[1,]
df <- data.frame(R2 = reg_ex_summary$adjr2, nvar = 1: length(reg_ex_summary$adjr2))
which.max(reg_ex_summary$adjr2)
df
View(df)
reg_ex_summary$which[9,]
reg_ex_summary$which[9,] == "TRUE"
reg_ex_summary$which[9,] == "TRUE"
names(reg_ex_summary)
names(reg_ex_summary$which[9,])
nrow(df)
p in nrow(df)
reg_ex_summary$which[reg_ex_summary$which[9,] == "FALSE"]
reg_ex_summary$which[9,]
reg_ex_summary$which[9,][reg_ex_summary$which[9,] == TRUE]
names(reg_ex_summary$which[9,][reg_ex_summary$which[9,] == TRUE])
names(reg_ex_summary$which[9,][reg_ex_summary$which[9,] == FALSE])
res <- names(reg_ex_summary$which[9,][reg_ex_summary$which[9,] == FALSE])
is.vector(res)
length(res)
varlist <- c(rad,lstat,black,medv,zn,dis,nox,ptratio)
varlist <- c("rad","lstat","black","medv","zn","dis","nox","ptratio")
for (i in varlist) {
reg_k101 <-  glm(crim ~ varlist[[i]])
}
for (i in varlist) {
reg_k101 <-  glm(crim ~ varlist[[i]], data = Boston)
}
View(Boston)
varlist <- c("rad","lstat","black","medv","zn","dis","nox","ptratio","crim")
for (i in varlist) {
reg_k101 <-  glm(crim ~ varlist[[i]], data = Boston)
}
varlist <- c("rad","lstat","black","medv","zn","dis","nox","ptratio","crim")
for (i in varlist) {
reg_k101 <-  glm(crim ~ varlist[i], data = Boston)
}
lr_cv
#Prediction
reg_test2 <- lm(Apps ~., data = College_train1)
x_test2 <- model.matrix(reg_test2)[,-1]
y_test2 <- College_test1$Apps
pred_test2 <- bind_cols(predict(lr_cv, newx = x_test2, s = "lambda.1se"),
predict(lr_cv, newx = x_test2, s = "lambda.min"))
#Prediction
reg_test2 <- lm(Apps ~., data = College_test1)
x_test2 <- model.matrix(reg_test2)[,-1]
y_test2 <- College_test1$Apps
pred_test2 <- bind_cols(predict(lr_cv, newx = x_test2, s = "lambda.1se"),
predict(lr_cv, newx = x_test2, s = "lambda.min"))
#LASSO REGRESSION
#Create training and testing data from the college
set.seed(123) #use set.seed for validation sets
reg2 <- lm(Apps ~ ., data = College_train1)
x2 <- model.matrix(reg2)[,-1]
y2 <- College_train1$Apps
lr <- glmnet(x2, y2)
set.seed(123) #use set.seed for cross validation
lr_cv <- cv.glmnet(x2, y2)
lr_cv
#Prediction
reg_test2 <- lm(Apps ~., data = College_test1)
x_test2 <- model.matrix(reg_test2)[,-1]
y_test2 <- College_test1$Apps
pred_test2 <- bind_cols(predict(lr_cv, newx = x_test2, s = "lambda.1se"),
predict(lr_cv, newx = x_test2, s = "lambda.min"))
pred_test2 |> head()
round(colMeans((pred_test2-y_test2)^2), digits = 2)
lr_cv
round(colMeans((pred_test-y_test1)^2), digits = 2)
set.seed(123) #use set.seed for cross validation
rr_cv <- cv.glmnet(x1, y1, alpha = 0)
plot(rr_cv) #plot the results of the cross validation on training data
#Prediction
reg_test1 <- lm(Apps ~ ., data = College_test1)
x_test1 <- model.matrix(reg_test1)[,-1]
y_test1 <- College_test1$Apps
pred_test <- bind_cols(predict(rr_cv, newx = x_test1, s = "lambda.1se"),
predict(rr_cv, newx = x_test1, s = "lambda.min"))
reg <- lm(Apps ~ ., data = College_train1)
x1 <- model.matrix(reg)[,-1]
y1 <- College_train1$Apps
rr <- glmnet(x1, y1, alpha = 0)
set.seed(123) #use set.seed for cross validation
rr_cv <- cv.glmnet(x1, y1, alpha = 0)
plot(rr_cv) #plot the results of the cross validation on training data
#Prediction
reg_test1 <- lm(Apps ~ ., data = College_test1)
x_test1 <- model.matrix(reg_test1)[,-1]
y_test1 <- College_test1$Apps
pred_test <- bind_cols(predict(rr_cv, newx = x_test1, s = "lambda.1se"),
predict(rr_cv, newx = x_test1, s = "lambda.min"))
round(colMeans((pred_test-y_test1)^2), digits = 2)
mean((predpcr - College[1:10,]$Apps)^2)
View(College)
summary(pcr_reg)
pcr_reg <- pcr(Apps ~ ., data = College, scale = TRUE, validation = "CV")
summary(pcr_reg)
pcr_reg1 <- pcr(Apps ~ ., data = College, scale =TRUE, ncomp = 17)
predpcr <- predict(pcr_reg1, College[1:10,], ncomp = 17)
mean((predpcr - College[1:10,]$Apps)^2) #test error
MSEP(pcr_reg) #mean squared error
#PLS
pls_reg <- plsr(Apps ~ ., data = College, scale=TRUE, validation = "CV")
summary(pls_reg)
pls_reg1 <- plsr(Apps ~ ., data = College, scale =TRUE, ncomp = 16)
predpls <- predict(pls_reg1, College[1:10,], ncomp = 16)
mean((predpls - College[1:10,]$Apps)^2)
ridgereg <- lm(crim ~ ., data = Boston)
x1 <- model.matrix(ridgereg)[,-1]
y1 <- Boston$crim
rr <- glmnet(x1, y1, alpha = 0)
ridgerr <- glmnet(x1, y1, alpha = 0)
set.seed(123) #use set.seed for cross validation
ridgerr_cv <- cv.glmnet(x1, y1, alpha = 0)
ridgereg <- lm(crim ~ ., data = Boston)
x1 <- model.matrix(ridgereg)[,-1]
y1 <- Boston$crim
ridgerr <- glmnet(x1, y1, alpha = 0)
set.seed(123)
ridgerr_cv <- cv.glmnet(x1, y1, alpha = 0)
#Prediction
x_test1 <- model.matrix(ridgereg)[,-1]
y_test1 <- Boston$crim
pred_test <- bind_cols(predict(ridgerr_cv, newx = x_test1, s = "lambda.1se"),
predict(ridgerr_cv, newx = x_test1, s = "lambda.min"))
round(colMeans((pred_test-y_test1)^2), digits = 2)
lassoreg <- lm(crim ~ ., data = Boston)
x2 <- model.matrix(lassoreg)[,-1]
y2 <- Boston$crim
lassolr <- glmnet(x2, y2)
set.seed(123)
lassolr_cv <- cv.glmnet(x2, y2)
#Prediction
x_test2 <- model.matrix(lassoreg)[,-1]
y_test2 <- Boston$crim
pred_test2 <- bind_cols(predict(lassolr_cv, newx = x_test2, s = "lambda.1se"),
predict(lassolr_cv, newx = x_test2, s = "lambda.min"))
round(colMeans((pred_test2-y_test2)^2), digits = 2)
#PCR
pcr_reg2 <- pcr(crim ~ ., data = Boston, scale = TRUE, validation = "CV")
summary(pcr_reg2)
pcr_reg3 <- pcr(crim ~ ., data = Boston, scale =TRUE, ncomp = 13)
predpcr2 <- predict(pcr_reg3, Boston[1:10,], ncomp = 13)
mean((predpcr2 - Boston[1:10,]$crim)^2)
pls_reg2 <- plsr(crim ~ ., data = Boston, scale=TRUE, validation = "CV")
summary(pls_reg2)
# 10 PCs produces the smallest RMSEP.
pls_reg3 <- plsr(crim ~ ., data = Boston, scale = TRUE, ncomp = 10)
predpls2 <- predict(pls_reg3, Boston[1:10,], ncomp = 10)
mean((predpls2 - Boston[1:10,]$crim)^2)
set.seed(123)
reg_k101 <-  glm(crim ~ rad + lstat + black + medv + zn + dis + nox +
ptratio,  data = Boston)
regCVk10 <- boot::cv.glm(Boston, reg_k101, K = 10)
regCVk10$delta[2]
coef(lassolr_cv)
lassolr_cv
coef(lassolr_cv)
coef(ridgerr_cv)
reg_ex
set.seed(123)
pcr_reg4 <- pcr(crim ~ ., data = Boston, scale = TRUE, validation = "CV", segments = 1)
summary(pcr_reg4)
pcr_reg4 <- pcr(crim ~ ., data = Boston, scale = TRUE, validation = "CV", segments = "1")
pcr_reg4 <- pcr(crim ~ ., data = Boston, scale = TRUE, validation = "CV")
summary(pcr_reg4)
pcr_reg3
set.seed(123)
pcr_reg4 <- pcr(crim ~ ., data = Boston, scale = TRUE, validation = "CV")
summary(pcr_reg4)
pls_reg4 <- plsr(crim ~ ., data = Boston, scale = TRUE, validation = "CV")
summary(pls_reg4)
regCk <- boot::cv.glm(Boston, reg_k101, K = 1)
regCk <- boot::cv.glm(Boston, reg_k101.2, K = 1)
reg_k101
regCVk10
regCVk10$delta[2]
#Best subset model
set.seed(123)
reg_k101.2 <-  glm(crim ~ rad + lstat + black + medv + zn + dis + nox +
ptratio,  data = Boston)
regCk <- boot::cv.glm(Boston, reg_k101.2, K = 1)
#Best subset model
set.seed(123)
reg_k101.2 <-  glm(crim ~ rad + lstat + black + medv + zn + dis + nox + ptratio,  data = Boston)
regCk <- boot::cv.glm(Boston, reg_k101.2, K = 2)
regCk1$delta[2]
regCk$delta[2]
regCk1 <- boot::cv.glm(Boston, reg_k101.2, K = 3)
regCk1$delta[2]
regCk2 <- boot::cv.glm(Boston, reg_k101.2, K = 4)
regCk2$delta[2]
regCk3 <- boot::cv.glm(Boston, reg_k101.2, K = 5)
regCk3$delta[2]
regCk4 <- boot::cv.glm(Boston, reg_k101.2, K = 6)
regCk4$delta[2]
regCk5 <- boot::cv.glm(Boston, reg_k101.2, K = 7)
regCk5$delta[2]
regCk6 <- boot::cv.glm(Boston, reg_k101.2, K = 8)
regCk6$delta[2]
regCk7 <- boot::cv.glm(Boston, reg_k101.2, K = 9)
regCk7$delta[2]
regCk8 <- boot::cv.glm(Boston, reg_k101.2, K = 10)
regCk8$delta[2]
regCk9 <- boot::cv.glm(Boston, reg_k101.2, K = 11)
regCk9$delta[2]
regCk10 <- boot::cv.glm(Boston, reg_k101.2, K = 12)
regCk10$delta[2]
regCk11 <- boot::cv.glm(Boston, reg_k101.2, K = 13)
regCk11$delta[2]
regCk0 <- boot::cv.glm(Boston, reg_k101.2, K = 1)
reg_ex_summary <- summary(reg_ex)
which.max(df$R2)
reg_ex_summary$which[9,]
reg_ex_summary$which[9,][reg_ex_summary$which[9,] ==TRUE]
set.seed(123)
reg_k101 <-  glm(crim ~ zn + indus + nox + dis + rad + ptratio + black +
lsat + medv,  data = Boston)
reg_k101 <-  glm(crim ~ zn + indus + nox + dis + rad + ptratio + black +
lstat + medv,  data = Boston)
regCVk10 <- boot::cv.glm(Boston, reg_k101, K = 10)
regCVk10$delta[2]
regCk0 <- boot::cv.glm(Boston, reg_k101, K = 1)
regCk <- boot::cv.glm(Boston, reg_k101, K = 2)
regCk$delta[2] #42.73576
regCk1 <- boot::cv.glm(Boston, reg_k101, K = 3)
regCk1$delta[2] #41.62394
regCk2 <- boot::cv.glm(Boston, reg_k101, K = 4)
regCk2$delta[2] #43.21016
regCk3 <- boot::cv.glm(Boston, reg_k101, K = 5)
regCk3$delta[2] #43.12444
regCk4 <- boot::cv.glm(Boston, reg_k101, K = 6)
regCk4$delta[2] #42.14101
regCk5 <- boot::cv.glm(Boston, reg_k101, K = 7)
regCk5$delta[2] #42.06893
regCk6 <- boot::cv.glm(Boston, reg_k101, K = 8)
regCk6$delta[2] #42.87799
regCk7 <- boot::cv.glm(Boston, reg_k101, K = 9)
regCk7$delta[2] #42.72324
regCk8 <- boot::cv.glm(Boston, reg_k101, K = 10)
regCk8$delta[2] #42.24621
regCk9 <- boot::cv.glm(Boston, reg_k101, K = 11)
regCk9$delta[2] #42.74178
regCk10 <- boot::cv.glm(Boston, reg_k101, K = 12)
regCk10$delta[2] #43.10318
regCk11 <- boot::cv.glm(Boston, reg_k101, K = 13)
regCk11$delta[2] #42.49001
#When K = 1
#Best subset model
regCk0 <- boot::cv.glm(Boston, reg_k101, K = 1)
regCVk10$delta[2]
mean((predpcr2 - Boston[1:10,]$crim)^2)
mean((predpls2 - Boston[1:10,]$crim)^2)
regCVk10$delta[2]
round(colMeans((pred_test-y_test1)^2), digits = 2)
round(colMeans((pred_test2-y_test2)^2), digits = 2)
mean((predpcr2 - Boston[1:10,]$crim)^2)
mean((predpls2 - Boston[1:10,]$crim)^2)
#PCR
summary(pcr_reg2)
#PLS
summary(pls_reg2)
regCVk10
regCk$call
regCk$K
regCk$seed
newreg <- summary(reg_k101)
summary(reg_k101)
regCk0$delta
regCk$delta
which.max(reg_ex_summary$adjr2)
reg_ex_summary$adjr2
#Adjusted R2
ggplot(df, (aes(nvar, R2))) +
geom_line()
#PCR plot
validationplot(pcr_reg2,val.type="MSEP")
#PLS plot
validationplot(pls_reg2,val.type="MSEP")
#Ridge plot
plot(ridgerr_cv)
#Adjusted R2
ggplot(df, (aes(nvar, R2))) +
geom_line()
#Ridge plot
plot(ridgerr_cv)
#Lasso plot
plot(lassolr_cv)
#PCR plot
validationplot(pcr_reg2,val.type="MSEP")
#PLS plot
validationplot(pls_reg2,val.type="MSEP")
pls_reg3
coef(pls_reg3)
summary(pls_reg3)
coef(pls_reg3)
coef(pcr_reg3)
pred_test <- bind_cols(predict(ridgerr_cv, newx = x_test1, s = "lambda.1se"),
predict(ridgerr_cv, newx = x_test1, s = "lambda.min"))
round(colMeans((pred_test-y_test1)^2), digits = 2)
pred_test2 <- bind_cols(predict(lassolr_cv, newx = x_test2, s = "lambda.1se"),
predict(lassolr_cv, newx = x_test2, s = "lambda.min"))
round(colMeans((pred_test2-y_test2)^2), digits = 2)
#The best least squares regression model using adjusted R2
library(leaps)
reg_ex <- regsubsets(crim ~ ., data = Boston, nvmax = 13)
reg_ex_summary <- summary(reg_ex)
df <- data.frame(R2 = reg_ex_summary$adjr2, nvar = 1:length(reg_ex_summary$adjr2))
which.max(df$R2)
reg_ex_summary$which[9,][reg_ex_summary$which[9,] ==TRUE]
set.seed(123)
reg_k101 <-  glm(crim ~ zn + indus + nox + dis + rad + ptratio + black +
lstat + medv,  data = Boston)
newreg <- summary(reg_k101)
regCVk10 <- boot::cv.glm(Boston, reg_k101, K = 10)
regCVk10$delta[2]
which.max(reg_ex_summary$adjr2)
# 9 variables included in their model
# K fold cross validation
set.seed(123)
reg_k101 <-  glm(crim ~ rad + lstat + black + medv + zn + dis + nox +
ptratio,  data = Boston)
regCVk10 <- boot::cv.glm(Boston, reg_k101, K = 10)
regCVk10$delta[2]
#Ridge regression
library(glmnet)
ridgereg <- lm(crim ~ ., data = Boston)
x1 <- model.matrix(ridgereg)[,-1]
y1 <- Boston$crim
ridgerr <- glmnet(x1, y1, alpha = 0)
set.seed(123)
ridgerr_cv <- cv.glmnet(x1, y1, alpha = 0)
coef(ridgerr_cv)
#Prediction
x_test1 <- model.matrix(ridgereg)[,-1]
y_test1 <- Boston$crim
pred_test <- bind_cols(predict(ridgerr_cv, newx = x_test1, s = "lambda.1se"),
predict(ridgerr_cv, newx = x_test1, s = "lambda.min"))
round(colMeans((pred_test-y_test1)^2), digits = 2)
# All 13 variables are included in the model.
#Lasso regression
lassoreg <- lm(crim ~ ., data = Boston)
x2 <- model.matrix(lassoreg)[,-1]
y2 <- Boston$crim
lassolr <- glmnet(x2, y2)
set.seed(123)
lassolr_cv <- cv.glmnet(x2, y2)
coef(lassolr_cv)
#Prediction
x_test2 <- model.matrix(lassoreg)[,-1]
y_test2 <- Boston$crim
pred_test2 <- bind_cols(predict(lassolr_cv, newx = x_test2, s = "lambda.1se"),
predict(lassolr_cv, newx = x_test2, s = "lambda.min"))
round(colMeans((pred_test2-y_test2)^2), digits = 2)
# Lasso regression removes all but one variable (rad)
#PCR
set.seed(123)
pcr_reg2 <- pcr(crim ~ ., data = Boston, scale = TRUE, validation = "CV")
summary(pcr_reg2)
# all 13 PCs produces the smallest RMSEP.
pcr_reg3 <- pcr(crim ~ ., data = Boston, scale =TRUE, ncomp = 13)
predpcr2 <- predict(pcr_reg3, Boston[1:10,], ncomp = 13)
mean((predpcr2 - Boston[1:10,]$crim)^2)
#PLS
set.seed(123)
pls_reg2 <- plsr(crim ~ ., data = Boston, scale=TRUE, validation = "CV")
summary(pls_reg2)
# 10 PCs produces the smallest RMSEP.
pls_reg3 <- plsr(crim ~ ., data = Boston, scale = TRUE, ncomp = 10)
predpls2 <- predict(pls_reg3, Boston[1:10,], ncomp = 10)
mean((predpls2 - Boston[1:10,]$crim)^2)
regCVk10$delta[2]
round(colMeans((pred_test-y_test1)^2), digits = 2)
round(colMeans((pred_test2-y_test2)^2), digits = 2)
mean((predpcr2 - Boston[1:10,]$crim)^2)
mean((predpls2 - Boston[1:10,]$crim)^2)
regCk <- boot::cv.glm(Boston, reg_k101, K = 2)
regCk$delta[2] #44.39915
regCk1 <- boot::cv.glm(Boston, reg_k101, K = 3)
regCk1$delta[2] #42.65767
regCk2 <- boot::cv.glm(Boston, reg_k101, K = 4)
regCk2$delta[2] #42.9966
regCk3 <- boot::cv.glm(Boston, reg_k101, K = 5)
regCk3$delta[2] #41.91571
regCk4 <- boot::cv.glm(Boston, reg_k101, K = 6)
regCk4$delta[2] #42.06058
regCk5 <- boot::cv.glm(Boston, reg_k101, K = 7)
regCk5$delta[2] #41.81203
regCk6 <- boot::cv.glm(Boston, reg_k101, K = 8)
regCk6$delta[2] #42.91333
regCk7 <- boot::cv.glm(Boston, reg_k101, K = 9)
regCk7$delta[2] #42.18136
regCk8 <- boot::cv.glm(Boston, reg_k101, K = 10)
regCk8$delta[2] #42.31046
regCk9 <- boot::cv.glm(Boston, reg_k101, K = 11)
regCk9$delta[2] #42.04023
regCk10 <- boot::cv.glm(Boston, reg_k101, K = 12)
regCk10$delta[2] #42.39873
regCk11 <- boot::cv.glm(Boston, reg_k101, K = 13)
regCk11$delta[2] #42.28631
#PCR
summary(pcr_reg2)
library(ggplot2)
#Adjusted R2
ggplot(df, (aes(nvar, R2))) +
geom_line()
#Ridge plot
plot(ridgerr_cv)
#Lasso plot
plot(lassolr_cv)
#PCR plot
validationplot(pcr_reg2,val.type="MSEP")
#PLS plot
validationplot(pls_reg2,val.type="MSEP")
#Model coefficient
coef(pls_reg3)
coef(pcr_reg3)
source("~/Research/rmexact/R/rmslrt.R")
source("~/Research/rmexact/R/chisqr.R")
source("~/Research/rmexact/R/exact.R")
source("~/Research/rmexact/R/gfreq.R")
source("~/Research/rmexact/R/utils.R")
library(tidyverse)
library(tidymodels)
install.packages(tidymodel)
install.packages("tidymodel")
install.packages("palmerpenguin")
library(randomforest)
install.packages("randomforest")
setwd("C:/Users/cecil/Documents/Research/rmexact_analysis/output")
setwd("C:/Users/cecil/Documents/Research/rmexact_analysis")
library(tidyverse)
paramdf0 <- readRDS("./output/alt/sims_alt.RDS")
paramdf <- readRDS("./output/null/sims_out.RDS")
paramdf0 %>%
dplyr::select(p, exact_pval, n) %>%
dplyr::filter(p == "c(0.1, 0.1, 0.2, 0.3, 0.3)") %>%
dplyr::mutate(p2 = as.character(p)) %>%
mutate(p2 = str_remove(p2, "^c")) %>%
ggplot2::ggplot(mapping = aes(sample = exact_pval))+
ggplot2::geom_qq(distribution = stats::qunif) +
ggplot2::facet_grid(p2 ~ n) +
ggplot2::geom_abline() +
theme_bw() +
theme(strip.background = element_rect(fill = "white")) +
theme(text = element_text(size = 17)) +
coord_cartesian(xlim = c(0.1, 1), ylim = c(0.1, 1)) +
ggtitle("Alternative Sims, Exact Test") +
xlab("Theoretical Quantiles") +
ylab("Observed P-values")
paramdf0 %>%
dplyr::select(p, exact_pval, n) %>%
dplyr::filter(p == "c(0.1, 0.1, 0.2, 0.3, 0.3)") %>%
dplyr::mutate(p2 = as.character(p)) %>%
mutate(p2 = str_remove(p2, "^c")) %>%
ggplot2::ggplot(mapping = aes(sample = exact_pval))+
ggplot2::geom_qq(distribution = stats::qunif) +
ggplot2::facet_grid(p2 ~ n) +
ggplot2::geom_abline() +
theme_bw() +
theme(strip.background = element_rect(fill = "white")) +
theme(text = element_text(size = 17)) +
coord_cartesian(xlim = c(0.001, 1), ylim = c(0.001, 1)) +
ggtitle("Alternative Sims, Exact Test") +
xlab("Theoretical Quantiles") +
ylab("Observed P-values")
paramdf0 %>%
select(p, splitlrt_pval, n) %>%
dplyr::filter(p == "c(0.1, 0.1, 0.2, 0.3, 0.3)") %>%
dplyr::mutate(p2 = as.character(p)) %>%
mutate(p2 = str_remove(p2, "^c")) %>%
ggplot2::ggplot(mapping = aes(sample = splitlrt_pval))+
ggplot2::geom_qq(distribution = stats::qunif) +
ggplot2::facet_grid(p2 ~ n) +
ggplot2::geom_abline() +
theme_bw() +
theme(strip.background = element_rect(fill = "white")) +
theme(text = element_text(size = 17)) +
coord_cartesian(xlim = c(0.001, 1), ylim = c(0.001, 1)) +
ggtitle("Alternative Sims, Split Likelihood Ratio Test") +
xlab("Theoretical Quantiles") +
ylab("Observed P-values")
paramdf0 %>%
dplyr::select(p, exact_pval, n) %>%
dplyr::filter(p == "c(0.1, 0.1, 0.2, 0.3, 0.3)") %>%
dplyr::mutate(p2 = as.character(p)) %>%
mutate(p2 = str_remove(p2, "^c")) %>%
ggplot2::ggplot(mapping = aes(sample = exact_pval))+
ggplot2::geom_qq(distribution = stats::qunif) +
ggplot2::facet_grid(p2 ~ n) +
ggplot2::geom_abline() +
theme_bw() +
theme(strip.background = element_rect(fill = "white")) +
theme(text = element_text(size = 17)) +
coord_cartesian(xlim = c(0.001, 1), ylim = c(0.001, 1)) +
ggtitle("Alternative Sims, Exact Test") +
xlab("Theoretical Quantiles") +
ylab("Observed P-values")
